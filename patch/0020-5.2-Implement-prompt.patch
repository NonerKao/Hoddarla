From be1b5905974f9c0ebc7cb58231b5d9616e075314 Mon Sep 17 00:00:00 2001
From: "Alan (Quey-Liang) Kao" <alankao@andestech.com>
Date: Wed, 6 Oct 2021 00:02:28 +0800
Subject: [PATCH 20/20] 5.2 Implement prompt

---
 src/os/file_opensbi.go      |  5 ++++-
 src/runtime/ethanol/csr.h   |  1 +
 src/runtime/ethanol/trap.go |  1 +
 src/runtime/ethanol/trap.s  | 11 +++++++++++
 src/runtime/os_opensbi.go   | 28 ++++++++++++++++++----------
 5 files changed, 35 insertions(+), 11 deletions(-)

diff --git a/src/os/file_opensbi.go b/src/os/file_opensbi.go
index f922590fc4..153071bc97 100644
--- a/src/os/file_opensbi.go
+++ b/src/os/file_opensbi.go
@@ -68,8 +68,11 @@ func (f *File) Sync() error {
 	return nil
 }
 
+var UartChannel chan byte
+
 func (f *File) read(b []byte) (n int, err error) {
-	return 0, nil
+	b[0] = <-UartChannel
+	return 1, nil
 }
 
 func (f *File) pread(b []byte, off int64) (n int, err error) {
diff --git a/src/runtime/ethanol/csr.h b/src/runtime/ethanol/csr.h
index cf17f69f7c..c67df25156 100644
--- a/src/runtime/ethanol/csr.h
+++ b/src/runtime/ethanol/csr.h
@@ -19,3 +19,4 @@
 
 // SIE & SIP encoding
 #define SIE_STI		$0x00000020
+#define SIE_SEI		$0x00000200
diff --git a/src/runtime/ethanol/trap.go b/src/runtime/ethanol/trap.go
index 6a97a430e9..21991611ba 100644
--- a/src/runtime/ethanol/trap.go
+++ b/src/runtime/ethanol/trap.go
@@ -5,6 +5,7 @@ package ethanol
 
 func SetSscratch(s uintptr)
 func TimerInterrupt(on bool)
+func ExternalInterrupt(on bool)
 func Interrupt(on bool)
 func SetTimer()
 func SetStvec(f func())
diff --git a/src/runtime/ethanol/trap.s b/src/runtime/ethanol/trap.s
index 02e09eadb5..dcc4e7f7b2 100644
--- a/src/runtime/ethanol/trap.s
+++ b/src/runtime/ethanol/trap.s
@@ -19,6 +19,17 @@ clear:
 	CSRRC	CSR_SIE, A1, ZERO
 	RET
 
+// func ExternalInterrupt(on bool)
+TEXT runtime∕ethanol·ExternalInterrupt(SB), NOSPLIT|NOFRAME, $0-8
+	MOV	on+0(FP), A0
+	MOV	SIE_SEI, A1
+	BEQ	A0, ZERO, clear
+	CSRRS	CSR_SIE, A1, ZERO
+	RET
+clear:
+	CSRRC	CSR_SIE, A1, ZERO
+	RET
+
 // func Interrupt(on bool)
 TEXT runtime∕ethanol·Interrupt(SB), NOSPLIT|NOFRAME, $0-8
 	MOV	on+0(FP), A0
diff --git a/src/runtime/os_opensbi.go b/src/runtime/os_opensbi.go
index 02d26d997c..03e1046cf8 100644
--- a/src/runtime/os_opensbi.go
+++ b/src/runtime/os_opensbi.go
@@ -124,7 +124,6 @@ func semacreate(mp *m) {
 //go:nosplit
 func semasleep(ns int64) int32 {
 	_g_ := getg()
-	print("[", _g_, "|", _g_.m, "] try sema in ", ns, " nanosecs \n")
 	for {
 		v := atomic.Load(&_g_.m.waitsemacount)
 		if v > 0 {
@@ -141,9 +140,6 @@ func semasleep(ns int64) int32 {
 //go:nosplit
 func semawakeup(mp *m) {
 	atomic.Xadd(&mp.waitsemacount, 1)
-	_g_ := getg()
-	print("[", _g_, "|", _g_.m, "] wakes [", mp.g0, "|", mp, "] \n")
-	//ret := lwp_unpark(int32(mp.procid), unsafe.Pointer(&mp.waitsemacount))
 }
 
 // The entry of ethanol kernel
@@ -154,17 +150,17 @@ func osinit() {
 	getg().m.procid = 2
 	physPageSize = 4096
 	memBase, memSize := ethanol.GetMemoryInfo()
-	print("Memory Base:", memBase, "\n")
-	print("Memory Size:", memSize, "\n")
+	print("Memory Base: ", unsafe.Pointer(uintptr(memBase)), "\n")
+	print("Memory Size: ", unsafe.Pointer(uintptr(memSize)), "\n")
 
 	// For the memory map of ethanol, check
 	// src/runtime/ethanol/README.
 	baseInit()
 	argc = ethanol.GetArgc()
-	print("argc: ", argc, "\n")
 
 	ethanol.SetSscratch(uintptr(0))
 	ethanol.TimerInterrupt(ON)
+	ethanol.ExternalInterrupt(ON)
 	ethanol.Interrupt(ON)
 	ethanol.SetTimer()
 	ethanol.SetStvec(ethanol_trap)
@@ -294,15 +290,17 @@ type rv64ctxt struct {
 }
 
 const (
-	TIMER_INTERRUPT = 0x5
+	TIMER_INTERRUPT    = 0x5
+	EXTERNAL_INTERRUPT = 0x9
 )
 
+//go:linkname eisr main.eisr
+func eisr(ctxt *rv64ctxt)
+
 //go:nosplit
 func ethanol_trap1(ctxt *rv64ctxt) {
 	_g_ := getg()
 
-	//print("from ", unsafe.Pointer(uintptr(ctxt.sepc)), " because ", unsafe.Pointer(uintptr(ctxt.scause)), "\n")
-	print("for thread ", _g_, "(", _g_.m, "): [", _g_.m.g0, ", ", _g_.m.gsignal, ", ", _g_.m.curg, "]\n")
 	if (ctxt.scause&uint64(0x8000000000000000))>>63 != 0 {
 		// interrupt
 		ctxt.scause &= 0xF
@@ -310,6 +308,13 @@ func ethanol_trap1(ctxt *rv64ctxt) {
 		case TIMER_INTERRUPT:
 			ethanol.SetTimer()
 			_g_.m.life -= 1
+		case EXTERNAL_INTERRUPT:
+			if _g_.m != &m0 {
+				_g_.m.life = 0
+			} else {
+				fn := eisr
+				fn(ctxt)
+			}
 		default:
 			throw("cannot handle other traps now")
 		}
@@ -317,6 +322,9 @@ func ethanol_trap1(ctxt *rv64ctxt) {
 		// exception
 		switch ctxt.scause {
 		default:
+			print("sepc: ", unsafe.Pointer(uintptr(ctxt.sepc)), "\n")
+			print("scause: ", unsafe.Pointer(uintptr(ctxt.scause)), "\n")
+			print("stval: ", unsafe.Pointer(uintptr(ctxt.stval)), "\n")
 			throw("unexpected exception")
 		}
 	}
-- 
2.32.0

