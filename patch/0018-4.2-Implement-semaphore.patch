From b47bd1b8cbd027a3e6275394897315cfc00132e1 Mon Sep 17 00:00:00 2001
From: "Alan (Quey-Liang) Kao" <alankao@andestech.com>
Date: Sun, 19 Sep 2021 14:55:43 +0800
Subject: [PATCH 18/19] 4.2 Implement semaphore

---
 src/runtime/defs_opensbi_riscv64.go |  14 +++
 src/runtime/ethanol/trap.s          |   2 +-
 src/runtime/lock_opensbi.go         | 172 ----------------------------
 src/runtime/lock_sema.go            |   4 +-
 src/runtime/os_opensbi.go           |  57 ++++++---
 src/runtime/proc.go                 |   2 -
 src/runtime/sys_opensbi_riscv64.s   |  13 ++-
 7 files changed, 72 insertions(+), 192 deletions(-)
 create mode 100644 src/runtime/defs_opensbi_riscv64.go
 delete mode 100644 src/runtime/lock_opensbi.go

diff --git a/src/runtime/defs_opensbi_riscv64.go b/src/runtime/defs_opensbi_riscv64.go
new file mode 100644
index 0000000000..7fbd6f71fe
--- /dev/null
+++ b/src/runtime/defs_opensbi_riscv64.go
@@ -0,0 +1,14 @@
+// Crafted because we don't have cgo.
+
+package runtime
+
+type timespec struct {
+	tv_sec  int64
+	tv_nsec int64
+}
+
+//go:nosplit
+func (ts *timespec) setNsec(ns int64) {
+	ts.tv_sec = ns / 1e9
+	ts.tv_nsec = ns % 1e9
+}
diff --git a/src/runtime/ethanol/trap.s b/src/runtime/ethanol/trap.s
index ebe35e7174..5ecf3328f2 100644
--- a/src/runtime/ethanol/trap.s
+++ b/src/runtime/ethanol/trap.s
@@ -33,7 +33,7 @@ clear:
 // func SetTimer()
 TEXT runtime∕ethanol·SetTimer(SB), NOSPLIT|NOFRAME, $0-0
 	CSRRS   CSR_TIME, ZERO, A0
-	ADD	$0x1000000, A0, A0
+	ADD	$0x100000, A0, A0
 	MOV     $0, A6
 	MOV     $0x54494D45, A7
 	ECALL
diff --git a/src/runtime/lock_opensbi.go b/src/runtime/lock_opensbi.go
deleted file mode 100644
index c6a3f929e1..0000000000
--- a/src/runtime/lock_opensbi.go
+++ /dev/null
@@ -1,172 +0,0 @@
-// Copyright 2018 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-//go:build opensbi && riscv64
-// +build opensbi,riscv64
-
-package runtime
-
-import (
-	_ "unsafe"
-)
-
-// js/wasm has no support for threads yet. There is no preemption.
-
-const (
-	mutex_unlocked = 0
-	mutex_locked   = 1
-
-	note_cleared = 0
-	note_woken   = 1
-	note_timeout = 2
-
-	active_spin     = 4
-	active_spin_cnt = 30
-	passive_spin    = 1
-)
-
-func lock(l *mutex) {
-	lockWithRank(l, getLockRank(l))
-}
-
-func lock2(l *mutex) {
-	if l.key == mutex_locked {
-		// js/wasm is single-threaded so we should never
-		// observe this.
-		throw("self deadlock")
-	}
-	gp := getg()
-	if gp.m.locks < 0 {
-		throw("lock count")
-	}
-	gp.m.locks++
-	l.key = mutex_locked
-}
-
-func unlock(l *mutex) {
-	unlockWithRank(l)
-}
-
-func unlock2(l *mutex) {
-	if l.key == mutex_unlocked {
-		throw("unlock of unlocked lock")
-	}
-	gp := getg()
-	gp.m.locks--
-	if gp.m.locks < 0 {
-		throw("lock count")
-	}
-	l.key = mutex_unlocked
-}
-
-// One-time notifications.
-
-type noteWithTimeout struct {
-	gp       *g
-	deadline int64
-}
-
-var (
-	notes            = make(map[*note]*g)
-	notesWithTimeout = make(map[*note]noteWithTimeout)
-)
-
-func noteclear(n *note) {
-	n.key = note_cleared
-}
-
-func notewakeup(n *note) {
-}
-
-func notesleep(n *note) {
-}
-
-func notetsleep(n *note, ns int64) bool {
-	return false
-}
-
-// same as runtime·notetsleep, but called on user g (not g0)
-func notetsleepg(n *note, ns int64) bool {
-	return false
-}
-
-// checkTimeouts resumes goroutines that are waiting on a note which has reached its deadline.
-func checkTimeouts() {
-	now := nanotime()
-	for n, nt := range notesWithTimeout {
-		if n.key == note_cleared && now >= nt.deadline {
-			n.key = note_timeout
-			goready(nt.gp, 1)
-		}
-	}
-}
-
-// events is a stack of calls from JavaScript into Go.
-var events []*event
-
-type event struct {
-	// g was the active goroutine when the call from JavaScript occurred.
-	// It needs to be active when returning to JavaScript.
-	gp *g
-	// returned reports whether the event handler has returned.
-	// When all goroutines are idle and the event handler has returned,
-	// then g gets resumed and returns the execution to JavaScript.
-	returned bool
-}
-
-// The timeout event started by beforeIdle.
-var idleID int32
-
-// beforeIdle gets called by the scheduler if no goroutine is awake.
-// If we are not already handling an event, then we pause for an async event.
-// If an event handler returned, we resume it and it will pause the execution.
-// beforeIdle either returns the specific goroutine to schedule next or
-// indicates with otherReady that some goroutine became ready.
-func beforeIdle(now, pollUntil int64) (gp *g, otherReady bool) {
-	return nil, false
-}
-
-func handleAsyncEvent() {
-	pause(getcallersp() - 16)
-}
-
-// clearIdleID clears our record of the timeout started by beforeIdle.
-func clearIdleID() {
-}
-
-// pause sets SP to newsp and pauses the execution of Go's WebAssembly code until an event is triggered.
-func pause(newsp uintptr)
-
-// handleEvent gets invoked on a call from JavaScript into Go. It calls the event handler of the syscall/js package
-// and then parks the handler goroutine to allow other goroutines to run before giving execution back to JavaScript.
-// When no other goroutine is awake any more, beforeIdle resumes the handler goroutine. Now that the same goroutine
-// is running as was running when the call came in from JavaScript, execution can be safely passed back to JavaScript.
-func handleEvent() {
-	e := &event{
-		gp:       getg(),
-		returned: false,
-	}
-	events = append(events, e)
-
-	eventHandler()
-
-	clearIdleID()
-
-	// wait until all goroutines are idle
-	e.returned = true
-	gopark(nil, nil, waitReasonZero, traceEvNone, 1)
-
-	events[len(events)-1] = nil
-	events = events[:len(events)-1]
-
-	// return execution to JavaScript
-	pause(getcallersp() - 16)
-}
-
-var eventHandler func()
-
-//go:linkname setEventHandler syscall/js.setEventHandler
-func setEventHandler(fn func()) {
-	eventHandler = fn
-}
diff --git a/src/runtime/lock_sema.go b/src/runtime/lock_sema.go
index 7a6af28b56..7ffccdafa5 100644
--- a/src/runtime/lock_sema.go
+++ b/src/runtime/lock_sema.go
@@ -2,8 +2,8 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-//go:build aix || darwin || netbsd || openbsd || plan9 || solaris || windows
-// +build aix darwin netbsd openbsd plan9 solaris windows
+//go:build aix || darwin || netbsd || openbsd || opensbi || plan9 || solaris || windows
+// +build aix darwin netbsd openbsd opensbi plan9 solaris windows
 
 package runtime
 
diff --git a/src/runtime/os_opensbi.go b/src/runtime/os_opensbi.go
index 688c79613e..02d26d997c 100644
--- a/src/runtime/os_opensbi.go
+++ b/src/runtime/os_opensbi.go
@@ -9,13 +9,10 @@ package runtime
 
 import (
 	"runtime/ethanol"
+	"runtime/internal/atomic"
 	"unsafe"
 )
 
-func exit(code int32) {
-	return
-}
-
 func write2(p uintptr)
 func write1(fd uintptr, p unsafe.Pointer, n int32) int32 {
 	if fd == 2 || fd == 1 {
@@ -31,6 +28,8 @@ func open(name *byte, mode, perm int32) int32        { panic("not implemented")
 func closefd(fd int32) int32                         { panic("not implemented") }
 func read(fd int32, p unsafe.Pointer, n int32) int32 { panic("not implemented") }
 
+func exit(code int32)
+func exitThread(wait *uint32)
 func usleep(usec uint32) {
 	return
 }
@@ -40,15 +39,12 @@ func usleep_no_g(usec uint32) {
 	usleep(usec)
 }
 
-func exitThread(wait *uint32) {
-	return
-}
-
 type mOS struct {
-	tmp0     uintptr
-	mstarted bool
-	life     int
-	ctxt     rv64ctxt
+	tmp0          uintptr
+	mstarted      bool
+	life          int
+	waitsemacount uint32
+	ctxt          rv64ctxt
 }
 
 func osyield() {
@@ -121,6 +117,35 @@ const (
 	OFF = false
 )
 
+//go:nosplit
+func semacreate(mp *m) {
+}
+
+//go:nosplit
+func semasleep(ns int64) int32 {
+	_g_ := getg()
+	print("[", _g_, "|", _g_.m, "] try sema in ", ns, " nanosecs \n")
+	for {
+		v := atomic.Load(&_g_.m.waitsemacount)
+		if v > 0 {
+			if atomic.Cas(&_g_.m.waitsemacount, v, v-1) {
+				return 0 // semaphore acquired
+			}
+			continue
+		}
+
+		// handle interrupt/timeout, return -1
+	}
+}
+
+//go:nosplit
+func semawakeup(mp *m) {
+	atomic.Xadd(&mp.waitsemacount, 1)
+	_g_ := getg()
+	print("[", _g_, "|", _g_.m, "] wakes [", mp.g0, "|", mp, "] \n")
+	//ret := lwp_unpark(int32(mp.procid), unsafe.Pointer(&mp.waitsemacount))
+}
+
 // The entry of ethanol kernel
 func ethanol_trap()
 
@@ -212,6 +237,8 @@ func nanotime1() int64
 func walltime() (sec int64, nsec int32)
 
 func mswitch1(prev, next *m)
+
+//go:nosplit
 func mswitch() {
 	_g_ := getg()
 	var next *m
@@ -270,11 +297,13 @@ const (
 	TIMER_INTERRUPT = 0x5
 )
 
+//go:nosplit
 func ethanol_trap1(ctxt *rv64ctxt) {
 	_g_ := getg()
 
-	print("ethanol_trap1 ", _g_.m, "\n")
-	if (ctxt.scause|uint64(0x8000000000000000))>>63 != 0 {
+	//print("from ", unsafe.Pointer(uintptr(ctxt.sepc)), " because ", unsafe.Pointer(uintptr(ctxt.scause)), "\n")
+	print("for thread ", _g_, "(", _g_.m, "): [", _g_.m.g0, ", ", _g_.m.gsignal, ", ", _g_.m.curg, "]\n")
+	if (ctxt.scause&uint64(0x8000000000000000))>>63 != 0 {
 		// interrupt
 		ctxt.scause &= 0xF
 		switch ctxt.scause {
diff --git a/src/runtime/proc.go b/src/runtime/proc.go
index f5d97ee47e..605e133000 100644
--- a/src/runtime/proc.go
+++ b/src/runtime/proc.go
@@ -211,8 +211,6 @@ func main() {
 		}
 	}()
 
-	for GOOS == "opensbi" {
-	}
 	gcenable()
 
 	main_init_done = make(chan bool)
diff --git a/src/runtime/sys_opensbi_riscv64.s b/src/runtime/sys_opensbi_riscv64.s
index 19061cffbc..03ec3ebeb7 100644
--- a/src/runtime/sys_opensbi_riscv64.s
+++ b/src/runtime/sys_opensbi_riscv64.s
@@ -12,7 +12,7 @@ TEXT runtime·write2(SB),NOSPLIT|NOFRAME,$0-8
         RET
 
 // func ethanol_trap()
-TEXT runtime·ethanol_trap(SB),NOSPLIT|TOPFRAME,$0
+TEXT runtime·ethanol_trap(SB),NOSPLIT|NOFRAME,$0
 	CSRRW	CSR_SSCRATCH, g, g
 	BNE	g, ZERO, from_user
 from_kernel:
@@ -207,3 +207,14 @@ restore:
 	MOV	(m_mOS+mOS_ctxt+rv64ctxt_t6)(A1), T6
 	MOV	(m_mOS+mOS_ctxt+rv64ctxt_a1)(A1), A1
 	RET
+
+TEXT runtime·exit(SB),NOSPLIT,$0
+	MOV     $0, A0
+	MOV     $0, A1
+	MOV     $0, A6
+	MOV     $0x53525354, A7
+	ECALL
+	RET
+
+TEXT runtime·exitThread(SB),NOSPLIT,$0
+	CALL	runtime·exit(SB)
-- 
2.32.0

